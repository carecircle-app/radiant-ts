/* eslint-disable */
// @ts-nocheck
"use client";
import React, { useEffect, useMemo, useState } from "react";

const API = "http://127.0.0.1:4000";
async function j(url, opts) { const r = await fetch(url, opts); if (!r.ok) throw new Error(await r.text()); return r.json(); }
function cx(...a){return a.filter(Boolean).join(" ");}

const DOW = [{key:0,label:"Sun"},{key:1,label:"Mon"},{key:2,label:"Tue"},{key:3,label:"Wed"},{key:4,label:"Thu"},{key:5,label:"Fri"},{key:6,label:"Sat"}];
function nextTs(dow,HHmm){const [H,m]=HHmm.split(":").map(v=>+v||0);const now=new Date();const t=new Date();t.setHours(H,m,0,0);const d=(dow-now.getDay()+7)%7;if(d===0&&t<=now)t.setDate(t.getDate()+7);else t.setDate(t.getDate()+d);return t.getTime();}

export default function AdminPage(){
  const [acting,setActing]=useState("u-owner");
  const hdr = useMemo(()=>({"x-user-id":acting}),[acting]);
  const [loading,setLoading]=useState(false);
  const [users,setUsers]=useState([]);
  const [tasks,setTasks]=useState([]);
  const [devices,setDevices]=useState([]);
  const children = users.filter(u=>u.role==="Child");

  // UI caps (Free=1, Lite=2, Elite=5)
  const [plan,setPlan]=useState("Elite");
  const cap = plan==="Free"?1:plan==="Lite"?2:5;

  // Add child
  const [newChildName,setNewChildName]=useState("");

  // Create task state
  const [mode,setMode]=useState("now"); // "now" | "weekly"
  const [title,setTitle]=useState("Clean desk");
  const [ackRequired,setAckRequired]=useState(true);
  const [photoProof,setPhotoProof]=useState(true);
  const [selKids,setSelKids]=useState([]);
  const [dueMins,setDueMins]=useState(2);
  const [weeklyTime,setWeeklyTime]=useState("08:00");
  const [weeklyDays,setWeeklyDays]=useState([1]);

  // Presets
  const [presetName,setPresetName]=useState("");
  const [presets,setPresets]=useState([]);

  // Proof
  const [proofTaskId,setProofTaskId]=useState("");
  const [proofFile,setProofFile]=useState(null);

  // Devices panel
  const [devKid,setDevKid]=useState("");
  const [devName,setDevName]=useState("");
  const [devKind,setDevKind]=useState("phone");
  const [devUrl,setDevUrl]=useState("");
  const [devPlatform,setDevPlatform]=useState("");

  async function loadAll(){
    setLoading(true);
    try{
      const [u,t] = await Promise.all([
        j(`${API}/api/users`,{headers:hdr}),
        j(`${API}/api/tasks`,{headers:hdr}),
      ]);
      setUsers(u); setTasks(t);
      if (selKids.length===0) {
        const first=u.find(x=>x.role==="Child"); if(first) setSelKids([first.id]);
      } else {
        setSelKids(prev=>prev.filter(id=>u.find(x=>x.id===id)));
      }
      const raw = localStorage.getItem("admin_presets");
      setPresets(raw?JSON.parse(raw):[]);
      // default devices list to first child
      const kid = devKid || (u.find(x=>x.role==="Child")?.id || "");
      setDevKid(kid);
      if (kid) setDevices(await j(`${API}/api/devices?userId=${kid}`,{headers:hdr}));
    }catch(e){ alert("Load failed: "+e.message); }
    finally{ setLoading(false); }
  }
  useEffect(()=>{ loadAll(); },[acting]);

  async function refreshDevices(){
    if (!devKid) { setDevices([]); return; }
    setDevices(await j(`${API}/api/devices?userId=${devKid}`,{headers:hdr}));
  }

  function toggleKid(id){
    setSelKids(prev=>{
      const has = prev.includes(id);
      if (has) return prev.filter(x=>x!==id);
      if (prev.length>=cap) return prev;
      return [...prev,id];
    });
  }

  function resetForm(){
    setTitle("Clean desk"); setAckRequired(true); setPhotoProof(true);
    setDueMins(2); setWeeklyTime("08:00"); setWeeklyDays([1]);
  }

  async function addChild(){
    const name = newChildName.trim(); if(!name){alert("Enter a name");return;}
    await j(`${API}/api/users`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({name,role:"Child",language:"en"})});
    setNewChildName(""); await loadAll();
  }

  async function createTasks(){
    if (!title.trim()) { alert("Title required"); return; }
    if (selKids.length===0) { alert("Pick at least one child"); return; }
    if (mode==="now"){
      const due = Date.now()+Math.max(1,+dueMins||1)*60_000;
      const base = {title,due,forMinor:true,ackRequired,photoProof,repeat:"none"};
      for (const uid of selKids){
        await j(`${API}/api/tasks`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({...base,assignedTo:uid})});
      }
      alert(`Created ${selKids.length} task(s) `);
    }else{
      const base = {title,forMinor:true,ackRequired,photoProof,repeat:"weekly"};
      for (const uid of selKids){
        for (const d of weeklyDays){
          const due = nextTs(d,weeklyTime);
          await j(`${API}/api/tasks`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({...base,assignedTo:uid,due})});
        }
      }
      alert(`Created ${selKids.length*weeklyDays.length} weekly task(s) `);
    }
    await loadAll();
  }

  async function completeTask(id){ await j(`${API}/api/tasks/${id}/complete`,{method:"POST",headers:hdr}); await loadAll(); }
  async function ackTask(id){ await j(`${API}/api/tasks/${id}/ack`,{method:"POST",headers:hdr}); await loadAll(); }

  async function uploadProof(){
    if (!proofTaskId || !proofFile) { alert("Pick a task and a file"); return; }
    const pres = await j(`${API}/api/uploads/presign`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({fileName:proofFile.name,fileType:proofFile.type||"application/octet-stream",fileSize:proofFile.size})});
    await fetch(pres.url,{method:"PUT",headers:{"Content-Type":proofFile.type||"application/octet-stream"},body:proofFile});
    await j(`${API}/api/uploads/complete`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({key:pres.key,size:proofFile.size,mime:proofFile.type||"application/octet-stream"})});
    await j(`${API}/api/tasks/${proofTaskId}/proof`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({key:pres.key})});
    alert("Proof uploaded "); setProofFile(null); setProofTaskId(""); await loadAll();
  }

  // Parental / device controls
  async function enforceUser(userId, action, reason){ await j(`${API}/api/parental/enforce`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({targetUserId:userId,action,reason})}); }
  async function deviceIntent(deviceId, action, reason){ await j(`${API}/api/devices/${deviceId}/intent`,{method:"POST",headers:{...hdr,"Content-Type":"application/json"},body:JSON.stringify({action,reason})}); }

  // Presets
  function savePreset(){
    const name = prompt("Preset name?", presetName || "Weekday chores");
    if(!name) return; setPresetName(name);
    const payload = {name, data:{plan,mode,title,ackRequired,photoProof,dueMins,weeklyTime,weeklyDays,selKids}};
    const arr = [...presets.filter(p=>p.name!==name), payload];
    localStorage.setItem("admin_presets", JSON.stringify(arr));
    setPresets(arr); alert("Preset saved ");
  }
  function applyPreset(){
    const name = prompt("Load which preset (exact name)?");
    if(!name) return; const p = presets.find(x=>x.name===name); if(!p) return alert("Not found");
    const d = p.data||{};
    setPlan(d.plan??"Elite"); setMode(d.mode??"now"); setTitle(d.title??"Clean desk");
    setAckRequired(!!d.ackRequired); setPhotoProof(!!d.photoProof); setDueMins(+d.dueMins||2);
    setWeeklyTime(d.weeklyTime??"08:00"); setWeeklyDays(Array.isArray(d.weeklyDays)?d.weeklyDays:[1]);
    setSelKids(Array.isArray(d.selKids)?d.selKids.slice(0,cap):[]);
  }

  // Devices CRUD
  async function addDevice(){
    if (!devKid) { alert("Choose a child"); return; }
    if (!devName.trim()) { alert("Device name required"); return; }
    await j(`${API}/api/devices`,{
      method:"POST",
      headers:{...hdr,"Content-Type":"application/json"},
      body:JSON.stringify({ userId: devKid, name: devName.trim(), kind: devKind, controlUrl: devUrl || undefined, platform: devPlatform || undefined })
    });
    setDevName(""); setDevUrl(""); setDevPlatform("");
    await refreshDevices();
  }
  async function removeDevice(id){
    await j(`${API}/api/devices/${id}`,{method:"DELETE",headers:hdr});
    await refreshDevices();
  }

  return (
    <div className="min-h-dvh p-6 space-y-8">
      {/* Header */}
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Admin</h1>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-600">Acting</span>
          <select className="border rounded px-2 py-1" value={acting} onChange={e=>setActing(e.target.value)}>
            {users.map(u=><option key={u.id} value={u.id}>{u.name} ({u.role})</option>)}
            {users.length===0 && <option value="u-owner">Owner (Owner)</option>}
          </select>
          <button className="ml-2 border rounded px-3 py-1" disabled={loading} onClick={loadAll}>Refresh</button>
        </div>
      </header>

      {/* Plan + Add Child */}
      <section className="grid gap-2 border rounded p-4">
        <div className="flex flex-wrap gap-6 items-end">
          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Plan (UI cap)</span>
            <select className="border rounded px-2 py-1" value={plan} onChange={e=>setPlan(e.target.value)}>
              <option>Free</option><option>Lite</option><option>Elite</option>
            </select>
            <span className="text-xs text-gray-500">Cap: {cap} child{cap>1?"ren":""}</span>
          </label>
          <div className="grow" />
          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Add child (name)</span>
            <div className="flex gap-2">
              <input className="border rounded px-2 py-1" value={newChildName} onChange={e=>setNewChildName(e.target.value)} placeholder="e.g., Alex" />
              <button className="border rounded px-3 py-1" onClick={addChild}>Add</button>
            </div>
          </label>
        </div>
      </section>

      {/* Create Task */}
      <section className="grid gap-2 border rounded p-4">
        <div className="flex items-center justify-between">
          <h2 className="font-medium">Create Minor Task</h2>
          <div className="flex items-center gap-4">
            <label className="flex items-center gap-2 text-sm"><input type="radio" name="mode" value="now" checked={mode==="now"} onChange={()=>setMode("now")} /> Now</label>
            <label className="flex items-center gap-2 text-sm"><input type="radio" name="mode" value="weekly" checked={mode==="weekly"} onChange={()=>setMode("weekly")} /> Weekly</label>
          </div>
        </div>

        <div className="text-sm text-gray-600">Select up to {cap} children</div>
        <div className="flex flex-wrap gap-3">
          {children.map(u=>{
            const checked = selKids.includes(u.id); const disabled = !checked && selKids.length>=cap;
            return (
              <label key={u.id} className={cx("flex items-center gap-2", disabled && "opacity-50")}>
                <input type="checkbox" checked={checked} disabled={disabled} onChange={()=>toggleKid(u.id)} />
                {u.name}
              </label>
            );
          })}
          {children.length===0 && <div className="text-sm text-gray-500">No Child users found.</div>}
        </div>
        <div className="text-xs text-gray-500">Selected: {selKids.length}/{cap}</div>

        <div className="grid md:grid-cols-4 gap-3 items-end mt-2">
          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Title</span>
            <input className="border rounded px-2 py-1" value={title} onChange={e=>setTitle(e.target.value)} />
          </label>

          {mode==="now" ? (
            <label className="grid gap-1">
              <span className="text-sm text-gray-600">Due (minutes from now)</span>
              <input type="number" className="border rounded px-2 py-1" value={dueMins} onChange={e=>setDueMins(+e.target.value||0)} />
            </label>
          ) : (
            <>
              <div className="grid gap-1">
                <span className="text-sm text-gray-600">Weekly time</span>
                <input type="time" className="border rounded px-2 py-1" value={weeklyTime} onChange={e=>setWeeklyTime(e.target.value)} />
              </div>
              <div className="grid gap-1 md:col-span-2">
                <span className="text-sm text-gray-600">Days</span>
                <div className="flex flex-wrap gap-3">
                  {DOW.map(d=>(
                    <label key={d.key} className="flex items-center gap-2">
                      <input type="checkbox" checked={weeklyDays.includes(d.key)}
                        onChange={()=>setWeeklyDays(prev=>prev.includes(d.key)?prev.filter(x=>x!==d.key):[...prev,d.key])}/>
                      {d.label}
                    </label>
                  ))}
                </div>
              </div>
            </>
          )}

          <div className="flex items-center gap-4">
            <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={ackRequired} onChange={e=>setAckRequired(e.target.checked)} /> Ack required</label>
            <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={photoProof} onChange={e=>setPhotoProof(e.target.checked)} /> Photo proof</label>
          </div>

          <div className="flex gap-2">
            <button className="border rounded px-3 py-1" onClick={createTasks} disabled={loading||selKids.length===0}>Create</button>
            <button className="border rounded px-3 py-1" onClick={resetForm}>Cancel</button>
            <button className="border rounded px-3 py-1" onClick={savePreset}>Save preset</button>
            <button className="border rounded px-3 py-1" onClick={applyPreset}>Load preset</button>
          </div>
        </div>
      </section>

      {/* Parental Enforce (user-wide signals) */}
      <section className="grid gap-2 border rounded p-4">
        <h2 className="font-medium">Parental Enforce (User)</h2>
        <div className="flex flex-wrap gap-3">
          {children.map(u=>(
            <div key={u.id} className="border rounded p-3 grid gap-2">
              <div className="font-medium">{u.name}</div>
              <div className="flex flex-wrap gap-2">
                <button className="border rounded px-2 py-1" onClick={()=>enforceUser(u.id,"play_loud_alert","Admin page")}>Loud alert</button>
                <button className="border rounded px-2 py-1" onClick={()=>enforceUser(u.id,"screen_lock","Admin page")}>Lock screen</button>
                <button className="border rounded px-2 py-1" onClick={()=>enforceUser(u.id,"network_pause","Admin page")}>Pause network</button>
                <button className="border rounded px-2 py-1" onClick={()=>enforceUser(u.id,"app_restart","Admin page")}>Restart app</button>
                <button className="border rounded px-2 py-1" onClick={()=>enforceUser(u.id,"device_restart","Admin page")}>Restart device</button>
              </div>
              <div className="text-xs text-gray-500">Clients should perform the local action on receipt.</div>
            </div>
          ))}
        </div>
      </section>

      {/* Devices registry + per-device actions */}
      <section className="grid gap-2 border rounded p-4">
        <h2 className="font-medium">Child Devices</h2>

        <div className="flex flex-wrap items-end gap-3">
          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Child</span>
            <select className="border rounded px-2 py-1" value={devKid} onChange={async e=>{ setDevKid(e.target.value); await refreshDevices(); }}>
              <option value=""> Select </option>
              {children.map(c=><option key={c.id} value={c.id}>{c.name}</option>)}
            </select>
          </label>

          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Device name</span>
            <input className="border rounded px-2 py-1" value={devName} onChange={e=>setDevName(e.target.value)} placeholder="e.g., Derek iPhone" />
          </label>

          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Kind</span>
            <select className="border rounded px-2 py-1" value={devKind} onChange={e=>setDevKind(e.target.value)}>
              <option value="phone">Phone</option>
              <option value="computer">Computer</option>
              <option value="tablet">Tablet</option>
              <option value="other">Other</option>
            </select>
          </label>

          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Control URL (optional)</span>
            <input className="border rounded px-2 py-1" value={devUrl} onChange={e=>setDevUrl(e.target.value)} placeholder="http://ip:port/agent" />
          </label>

          <label className="grid gap-1">
            <span className="text-sm text-gray-600">Platform (optional)</span>
            <input className="border rounded px-2 py-1" value={devPlatform} onChange={e=>setDevPlatform(e.target.value)} placeholder="iOS, Windows, Android" />
          </label>

          <button className="border rounded px-3 py-1" onClick={addDevice} disabled={!devKid || !devName}>Add device</button>
        </div>

        <div className="mt-3 overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead><tr className="text-left border-b"><th className="py-2 pr-4">Name</th><th className="py-2 pr-4">Kind</th><th className="py-2 pr-4">Platform</th><th className="py-2 pr-4">Control URL</th><th className="py-2">Actions</th></tr></thead>
            <tbody>
              {devices.map(d=>(
                <tr key={d.id} className="border-b">
                  <td className="py-2 pr-4">{d.name}</td>
                  <td className="py-2 pr-4">{d.kind}</td>
                  <td className="py-2 pr-4">{d.platform || "-"}</td>
                  <td className="py-2 pr-4">{d.controlUrl || "-"}</td>
                  <td className="py-2 flex gap-2">
                    <button className="border rounded px-2 py-1" onClick={()=>deviceIntent(d.id,"app_restart","Admin page")}>Restart app</button>
                    <button className="border rounded px-2 py-1" onClick={()=>deviceIntent(d.id,"device_restart","Admin page")}>Restart device</button>
                    <button className="border rounded px-2 py-1" onClick={()=>removeDevice(d.id)}>Remove</button>
                  </td>
                </tr>
              ))}
              {devices.length===0 && <tr><td className="py-4 text-gray-500" colSpan={5}>No devices</td></tr>}
            </tbody>
          </table>
        </div>
      </section>

      {/* Upload Photo Proof */}
      <section className="grid gap-2 border rounded p-4">
        <h2 className="font-medium">Upload Photo Proof</h2>
        <div className="flex flex-wrap items-center gap-3">
          <select className="border rounded px-2 py-1" value={proofTaskId} onChange={e=>setProofTaskId(e.target.value)}>
            <option value="">Select task</option>
            {tasks.map(t=><option key={t.id} value={t.id}>{t.title}</option>)}
          </select>
          <input type="file" onChange={e=>setProofFile(e.currentTarget.files?.[0] ?? null)} />
          <button className="border rounded px-3 py-1" onClick={uploadProof} disabled={!proofTaskId || !proofFile}>Upload proof</button>
        </div>
      </section>

      {/* Tasks table */}
      <section className="grid gap-2 border rounded p-4">
        <div className="flex items-center justify-between">
          <h2 className="font-medium">Tasks</h2>
          <button className="border rounded px-3 py-1" onClick={loadAll} disabled={loading}>Refresh</button>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead><tr className="text-left border-b"><th className="py-2 pr-4">Title</th><th className="py-2 pr-4">Assignee</th><th className="py-2 pr-4">Due</th><th className="py-2 pr-4">Minor</th><th className="py-2 pr-4">Ack</th><th className="py-2 pr-4">Proof</th><th className="py-2">Actions</th></tr></thead>
            <tbody>
              {tasks.map(t=>(
                <tr key={t.id} className="border-b">
                  <td className="py-2 pr-4">{t.title}</td>
                  <td className="py-2 pr-4">{t.assignedTo || "-"}</td>
                  <td className="py-2 pr-4">{t.due ? new Date(t.due).toLocaleString() : "-"}</td>
                  <td className="py-2 pr-4">{t.forMinor ? `stage ${t.__minorStage ?? 0}` : "-"}</td>
                  <td className="py-2 pr-4">{t.ackBy || "-"}</td>
                  <td className="py-2 pr-4">{t.proofKey ? t.proofKey.split("/").slice(-1)[0] : "-"}</td>
                  <td className="py-2 flex gap-2">
                    <button className="border rounded px-2 py-1" onClick={()=>ackTask(t.id)}>Ack</button>
                    <button className="border rounded px-2 py-1" onClick={()=>completeTask(t.id)}>Complete</button>
                  </td>
                </tr>
              ))}
              {tasks.length===0 && <tr><td className="py-4 text-gray-500" colSpan={7}>No tasks</td></tr>}
            </tbody>
          </table>
        </div>
      </section>

      <footer className="text-xs text-gray-500">Connected to API at {API} as <b>{acting}</b></footer>
    </div>
  );
}
